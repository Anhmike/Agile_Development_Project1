<!DOCTYPE html>
<html>
  <head>
    <title>MediHelp</title>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
       #map {
        height: 400px;  /* The height is 400 pixels */
        width: 50%;  /* The width is the width of the web page */
       }
      /* Optional: Makes the sample page fill the window. */
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #button {
        position: absolute;
        top: 10px;
        left: 55%;
        z-index: 5;
        background-color: #fff;
        text-align: center;
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
      }
      #button1 {
        position: absolute;
        top: 40px;
        left: 55%;
        z-index: 5;
        background-color: #fff;
        text-align: center;
        font-family: 'Roboto','sans-serif';
        line-height: 30px;
        padding-left: 10px;
      }
    </style>
  </head>
  <body>
    <div id="button">
      <input id="submit" type="button" value="Glasgow">
    </div>
    <div id="button1">
        <input id="submit1" type="button" value="Dundee">
    </div>
    <div id="map"></div>
    <script>
      function initMap() {
        var arMarker;
        var map = new google.maps.Map(document.getElementById('map'), {
          zoom: 5,
          center: {lat: 35, lng: -96}
        });
        var geocoder = new google.maps.Geocoder();

        document.getElementById('submit').addEventListener('click', function() {
          geocodeAddress(geocoder, map, 1);
        });
        document.getElementById('submit1').addEventListener('click', function() {
          geocodeAddress(geocoder, map, 2);
        });
      }

      function distanceMatriX(origin, destinationA, destinationB) {
        var service = new google.maps.DistanceMatrixService();
        service.getDistanceMatrix(
        {
            origins: [origin],
            destinations: [destinationA, destinationB],
        }, callback);
    }

    function callback(response, status) {
        if (status == 'OK') {
            var origins = response.originAddresses;
            var destinations = response.destinationAddresses;

            for (var i = 0; i < origins.length; i++) {
                var results = response.rows[i].elements;
                for (var j = 0; j < results.length; j++) {
                    var distance = element.distance.text;
                    outputDiv.innerHYML += originList[i] + results[j].distnce.text + '<br>';
                }
            }
        }
    }

      function geocodeAddress(geocoder, resultsMap, num) {
        if (num == 1){
            var address = document.getElementById('submit').value;}
        else{
            var address = document.getElementById('submit1').value;}
        geocoder.geocode({'address': address}, function(results, status) {
          if (status === 'OK') {
            resultsMap.setCenter(results[0].geometry.location);
            var marker = new google.maps.Marker({
              map: resultsMap,
              position: results[0].geometry.location,
              title: address 
            });
          } else {
            alert('Geocode was not successful for the following reason: ' + status);
          }
        });
      }
    </script>
    <script async defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDYNH-VAjyeKCXX0w90AWoknL2qzTL_5Nk&callback=initMap">
    </script>
  </body>
</html>
